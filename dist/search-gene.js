import { S as SvelteComponent, i as init, s as safe_not_equal, C as handle_promise, e as element, a as space, b as attr, c as insert, d as append, D as update_await_block_branch, m as transition_in, p as transition_out, f as detach, u as create_component, t as text, v as mount_component, n as noop, w as destroy_component, y as empty, r as group_outros, o as check_outros, g as destroy_each, q as src_url_equal, k as Stanza, l as defineStanzaElement } from './index-e41a6caa.js';
import { t as toCamelCase } from './CamelCase-d435ec30.js';
import { F as Fa, a as faTriangleExclamation, f as faCircleChevronRight } from './index-97bbddfa.js';
import { d as drugIcon } from './drug-97ae0c78.js';

/* stanzas/search-gene/App.svelte generated by Svelte v3.58.0 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i].genename;
	child_ctx[6] = list[i].uniprot_acc;
	child_ctx[7] = list[i].calculation_type;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

// (62:6) {:catch error}
function create_catch_block(ctx) {
	let tr;
	let td;
	let fa;
	let t;
	let br;
	let current;

	fa = new Fa({
			props: {
				icon: faTriangleExclamation,
				size: "90%",
				color: "var(--warning-color)"
			}
		});

	return {
		c() {
			tr = element("tr");
			td = element("td");
			create_component(fa.$$.fragment);
			t = text("\n            Unable to fetch data from the server. Please refresh the page or try\n            again later.");
			br = element("br");
			attr(td, "class", "error-message");
			attr(td, "colspan", "3");
		},
		m(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td);
			mount_component(fa, td, null);
			append(td, t);
			append(td, br);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(fa.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(fa.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(tr);
			destroy_component(fa);
		}
	};
}

// (37:6) {:then dataset}
function create_then_block(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*dataset*/ ctx[4].data;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(target, anchor);
				}
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*promise, drugIcon, window, assembly, faCircleChevronRight*/ 3) {
				each_value = /*dataset*/ ctx[4].data;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (53:14) {#if calculation_type.length > 0}
function create_if_block(ctx) {
	let each_1_anchor;
	let each_value_1 = /*calculation_type*/ ctx[7];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(target, anchor);
				}
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*promise, drugIcon*/ 2) {
				each_value_1 = /*calculation_type*/ ctx[7];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (54:16) {#each calculation_type as calc}
function create_each_block_1(ctx) {
	let img;
	let img_src_value;
	let t0;
	let t1_value = /*calc*/ ctx[10] + "";
	let t1;

	return {
		c() {
			img = element("img");
			t0 = space();
			t1 = text(t1_value);
			attr(img, "class", "icon");
			if (!src_url_equal(img.src, img_src_value = drugIcon)) attr(img, "src", img_src_value);
			attr(img, "alt", "drug");
		},
		m(target, anchor) {
			insert(target, img, anchor);
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(img);
			if (detaching) detach(t0);
			if (detaching) detach(t1);
		}
	};
}

// (38:8) {#each dataset.data as { genename, uniprot_acc, calculation_type }}
function create_each_block(ctx) {
	let tr;
	let td0;
	let a;
	let t0_value = /*genename*/ ctx[5] + "";
	let t0;
	let fa;
	let a_href_value;
	let t1;
	let td1;
	let t2_value = /*uniprot_acc*/ ctx[6] + "";
	let t2;
	let t3;
	let td2;
	let t4;
	let current;

	fa = new Fa({
			props: {
				icon: faCircleChevronRight,
				size: "90%",
				color: "var(--gene-color)"
			}
		});

	let if_block = /*calculation_type*/ ctx[7].length > 0 && create_if_block(ctx);

	return {
		c() {
			tr = element("tr");
			td0 = element("td");
			a = element("a");
			t0 = text(t0_value);
			create_component(fa.$$.fragment);
			t1 = space();
			td1 = element("td");
			t2 = text(t2_value);
			t3 = space();
			td2 = element("td");
			if (if_block) if_block.c();
			t4 = space();
			attr(a, "class", "link-gene");
			attr(a, "href", a_href_value = `${window.location.origin}/dev/genes/details?assembly=${/*assembly*/ ctx[0]}&genename=${/*genename*/ ctx[5]}&uniprot_acc=${/*uniprot_acc*/ ctx[6]}`);
		},
		m(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td0);
			append(td0, a);
			append(a, t0);
			mount_component(fa, a, null);
			append(tr, t1);
			append(tr, td1);
			append(td1, t2);
			append(tr, t3);
			append(tr, td2);
			if (if_block) if_block.m(td2, null);
			append(tr, t4);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*assembly*/ 1 && a_href_value !== (a_href_value = `${window.location.origin}/dev/genes/details?assembly=${/*assembly*/ ctx[0]}&genename=${/*genename*/ ctx[5]}&uniprot_acc=${/*uniprot_acc*/ ctx[6]}`)) {
				attr(a, "href", a_href_value);
			}

			if (/*calculation_type*/ ctx[7].length > 0) if_block.p(ctx, dirty);
		},
		i(local) {
			if (current) return;
			transition_in(fa.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(fa.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(tr);
			destroy_component(fa);
			if (if_block) if_block.d();
		}
	};
}

// (35:22)          <tr><td colspan="3">Loading...</td></tr>       {:then dataset}
function create_pending_block(ctx) {
	let tr;

	return {
		c() {
			tr = element("tr");
			tr.innerHTML = `<td colspan="3">Loading...</td>`;
		},
		m(target, anchor) {
			insert(target, tr, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(tr);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let table;
	let thead;
	let t5;
	let tbody;
	let current;

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: true,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 4,
		error: 13,
		blocks: [,,,]
	};

	handle_promise(/*promise*/ ctx[1], info);

	return {
		c() {
			div = element("div");
			table = element("table");
			thead = element("thead");

			thead.innerHTML = `<tr><th class="th-gene">Name</th> 
        <th class="th-gene">UniProt acc</th> 
        <th class="th-calc">Calculated</th></tr>`;

			t5 = space();
			tbody = element("tbody");
			info.block.c();
			attr(table, "class", "table");
			attr(div, "class", "search-gene");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, table);
			append(table, thead);
			append(table, t5);
			append(table, tbody);
			info.block.m(tbody, info.anchor = null);
			info.mount = () => tbody;
			info.anchor = null;
			current = true;
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;
			update_await_block_branch(info, ctx, dirty);
		},
		i(local) {
			if (current) return;
			transition_in(info.block);
			current = true;
		},
		o(local) {
			for (let i = 0; i < 3; i += 1) {
				const block = info.blocks[i];
				transition_out(block);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			info.block.d();
			info.token = null;
			info = null;
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { assembly, term } = $$props;
	let promise = search(term);

	async function search(geneName) {
		const response = await fetch(`https://precisionmd-db.med.kyoto-u.ac.jp/api/genes/search?assembly=${assembly}&genename=${geneName}&limit=300`);
		const json = await response.json();

		if (response.ok) {
			return json;
		} else {
			throw new Error(json);
		}
	}

	$$self.$$set = $$props => {
		if ('assembly' in $$props) $$invalidate(0, assembly = $$props.assembly);
		if ('term' in $$props) $$invalidate(2, term = $$props.term);
	};

	return [assembly, promise, term];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { assembly: 0, term: 2 });
	}
}

class SearchGene extends Stanza {
  app = null;

  async render() {
    if (this.app) {
      this.root.querySelector("main > .search-gene").remove();
    }
    this.app = new App({
      target: this.root.querySelector("main"),
      props: {
        assembly: toCamelCase(this.params)["stanzaAssembly"],
        term: toCamelCase(this.params)["stanzaTerm"],
        root: this.root.querySelector("main"),
      },
    });
  }
}

var stanzaModule = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': SearchGene
});

var metadata = {
	"@context": {
	stanza: "http://togostanza.org/resource/stanza#"
},
	"@id": "search-gene",
	"stanza:label": "Search Gene",
	"stanza:definition": "For PrecisionMD-DB",
	"stanza:license": "MIT",
	"stanza:author": "PENQE",
	"stanza:contributor": [
],
	"stanza:created": "2023-04-21",
	"stanza:updated": "2023-04-21",
	"stanza:parameter": [
	{
		"stanza:key": "stanza-assembly",
		"stanza:example": "hg38",
		"stanza:description": "Assembly"
	},
	{
		"stanza:key": "stanza-term",
		"stanza:example": "ALK",
		"stanza:description": "Genename"
	}
],
	"stanza:menu-placement": "none",
	"stanza:style": [
	{
		"stanza:key": "--togostanza-canvas-height",
		"stanza:type": "number",
		"stanza:default": 350,
		"stanza:description": "Canvas height"
	},
	{
		"stanza:key": "--togostanza-theme-background_color",
		"stanza:type": "color",
		"stanza:default": "#11435c",
		"stanza:description": "Background color"
	},
	{
		"stanza:key": "--togostanza-fonts-font_family",
		"stanza:type": "text",
		"stanza:default": "Helvetica Neue, Arial, sans-serif",
		"stanza:description": "Font family"
	},
	{
		"stanza:key": "--togostanza-fonts-font_color",
		"stanza:type": "color",
		"stanza:default": "#ffffff",
		"stanza:description": "Text color"
	},
	{
		"stanza:key": "--togostanza-fonts-font_size_primary",
		"stanza:type": "number",
		"stanza:default": 14,
		"stanza:description": "Primary font size"
	},
	{
		"stanza:key": "--togostanza-fonts-font_align",
		"stanza:type": "single-choice",
		"stanza:choice": [
			"left",
			"center",
			"right"
		],
		"stanza:default": "center",
		"stanza:description": "text align of greeting"
	}
],
	"stanza:incomingEvent": [
],
	"stanza:outgoingEvent": [
]
};

var templates = [
  
];

const url = import.meta.url.replace(/\?.*$/, '');

defineStanzaElement({stanzaModule, metadata, templates, url});
//# sourceMappingURL=search-gene.js.map
