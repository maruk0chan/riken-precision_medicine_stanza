import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, a as space, b as attr, c as insert, d as append, m as transition_in, o as check_outros, p as transition_out, f as detach, g as destroy_each, t as text, h as set_data, r as group_outros, n as noop, u as create_component, v as mount_component, w as destroy_component, k as Stanza, l as defineStanzaElement } from './index-e41a6caa.js';
import { t as toCamelCase } from './CamelCase-d435ec30.js';
import { F as Fa, f as faCircleChevronRight } from './index-97bbddfa.js';

/* stanzas/gene-keyvalue/App.svelte generated by Svelte v3.58.0 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i].key;
	child_ctx[5] = list[i].value;
	child_ctx[7] = i;
	return child_ctx;
}

// (68:10) {:else}
function create_else_block(ctx) {
	let t_value = (/*value*/ ctx[5] ? /*value*/ ctx[5] : "Loading...") + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*geneList*/ 2 && t_value !== (t_value = (/*value*/ ctx[5] ? /*value*/ ctx[5] : "Loading...") + "")) set_data(t, t_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (58:10) {#if index === 0}
function create_if_block(ctx) {
	let a;
	let t0_value = /*value*/ ctx[5] + "";
	let t0;
	let t1;
	let fa;
	let a_href_value;
	let current;

	fa = new Fa({
			props: {
				icon: faCircleChevronRight,
				size: "90%",
				color: "var(--gene-color)"
			}
		});

	return {
		c() {
			a = element("a");
			t0 = text(t0_value);
			t1 = space();
			create_component(fa.$$.fragment);
			attr(a, "href", a_href_value = `${window.location.origin}/dev/genes/details?uniprot_acc=Q9UM73&assembly=grch38&genename=${/*term*/ ctx[0]}`);
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t0);
			append(a, t1);
			mount_component(fa, a, null);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*geneList*/ 2) && t0_value !== (t0_value = /*value*/ ctx[5] + "")) set_data(t0, t0_value);

			if (!current || dirty & /*term*/ 1 && a_href_value !== (a_href_value = `${window.location.origin}/dev/genes/details?uniprot_acc=Q9UM73&assembly=grch38&genename=${/*term*/ ctx[0]}`)) {
				attr(a, "href", a_href_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(fa.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(fa.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			destroy_component(fa);
		}
	};
}

// (54:4) {#each geneList as { key, value }
function create_each_block(ctx) {
	let tr;
	let th;
	let t0_value = /*key*/ ctx[4] + "";
	let t0;
	let t1;
	let td;
	let current_block_type_index;
	let if_block;
	let t2;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*index*/ ctx[7] === 0) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			tr = element("tr");
			th = element("th");
			t0 = text(t0_value);
			t1 = space();
			td = element("td");
			if_block.c();
			t2 = space();
		},
		m(target, anchor) {
			insert(target, tr, anchor);
			append(tr, th);
			append(th, t0);
			append(tr, t1);
			append(tr, td);
			if_blocks[current_block_type_index].m(td, null);
			append(tr, t2);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*geneList*/ 2) && t0_value !== (t0_value = /*key*/ ctx[4] + "")) set_data(t0, t0_value);
			if_block.p(ctx, dirty);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(tr);
			if_blocks[current_block_type_index].d();
		}
	};
}

function create_fragment(ctx) {
	let div;
	let h3;
	let t1;
	let table;
	let current;
	let each_value = /*geneList*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div = element("div");
			h3 = element("h3");
			h3.textContent = "Gene Information";
			t1 = space();
			table = element("table");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(h3, "class", "title");
			attr(div, "class", "gene-keyvalue");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h3);
			append(div, t1);
			append(div, table);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(table, null);
				}
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*window, term, faCircleChevronRight, geneList*/ 3) {
				each_value = /*geneList*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(table, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let geneList;
	let { term } = $$props;

	// define the object structure from api
	let geneData = [
		{
			symbol: term,
			assembly: "",
			chromosome: "",
			position: ""
		}
	];

	// Get window object
	const handleFetchRequestDone = () => {
		let fetchGeneData = window.$fetchedData.gene;

		$$invalidate(2, geneData = [
			{
				symbol: term,
				assembly: fetchGeneData[0].assembly,
				chromosome: fetchGeneData[0].chromosome,
				position: fetchGeneData[0].position
			}
		]);

		window.dispatchEvent(new CustomEvent("childHasGotData"));
	};

	window.addEventListener("fetchRequestDone", handleFetchRequestDone);

	$$self.$$set = $$props => {
		if ('term' in $$props) $$invalidate(0, term = $$props.term);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*term, geneData*/ 5) {
			// When api is not okay
			// setTimeout(() => {
			//   gene = [
			//     {
			//       assembly: "hg38",
			//       chromosome: "chr1",
			//       position: "123456",
			//     },
			//   ];
			// }, 1000);
			// define the object structure for display
			$$invalidate(1, geneList = [
				{ key: "Symbol", value: term },
				{
					key: "Assembly",
					value: geneData[0].assembly
				},
				{
					key: "Chromosome",
					value: geneData[0].chromosome
				},
				{
					key: "Position",
					value: geneData[0].position
				}
			]);
		}
	};

	return [term, geneList, geneData];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { term: 0 });
	}
}

class GeneKeyvalue extends Stanza {
  app = null;

  async render() {
    if (this.app) {
      this.root.querySelector("main > .heatmap-table").remove();
    }
    this.app = new App({
      target: this.root.querySelector("main"),
      props: {
        term: toCamelCase(this.params)["stanzaTerm"],
        root: this.root.querySelector("main"),
      },
    });
  }
}

var stanzaModule = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': GeneKeyvalue
});

var metadata = {
	"@context": {
	stanza: "http://togostanza.org/resource/stanza#"
},
	"@id": "gene-keyvalue",
	"stanza:label": "Gene Key-Value",
	"stanza:definition": "For PrecisionMD-DB",
	"stanza:license": "MIT",
	"stanza:author": "PENQE",
	"stanza:contributor": [
	"Yukiko Noda"
],
	"stanza:created": "2023-04-05",
	"stanza:updated": "2023-04-05",
	"stanza:parameter": [
	{
		"stanza:key": "stanza-term",
		"stanza:example": "ALK",
		"stanza:description": "Genename"
	}
],
	"stanza:menu-placement": "none",
	"stanza:style": [
	{
		"stanza:key": "--togostanza-canvas-height",
		"stanza:type": "number",
		"stanza:default": 350,
		"stanza:description": "Canvas height"
	},
	{
		"stanza:key": "--togostanza-theme-background_color",
		"stanza:type": "color",
		"stanza:default": "#11435c",
		"stanza:description": "Background color"
	},
	{
		"stanza:key": "--togostanza-fonts-font_family",
		"stanza:type": "text",
		"stanza:default": "Helvetica Neue, Arial, sans-serif",
		"stanza:description": "Font family"
	},
	{
		"stanza:key": "--togostanza-fonts-font_color",
		"stanza:type": "color",
		"stanza:default": "#ffffff",
		"stanza:description": "Text color"
	},
	{
		"stanza:key": "--togostanza-fonts-font_size_primary",
		"stanza:type": "number",
		"stanza:default": 14,
		"stanza:description": "Primary font size"
	},
	{
		"stanza:key": "--togostanza-fonts-font_align",
		"stanza:type": "single-choice",
		"stanza:choice": [
			"left",
			"center",
			"right"
		],
		"stanza:default": "center",
		"stanza:description": "text align of greeting"
	}
],
	"stanza:incomingEvent": [
],
	"stanza:outgoingEvent": [
]
};

var templates = [
  
];

const url = import.meta.url.replace(/\?.*$/, '');

defineStanzaElement({stanzaModule, metadata, templates, url});
//# sourceMappingURL=gene-keyvalue.js.map
