import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, a as space, b as attr, c as insert, d as append, m as transition_in, o as check_outros, p as transition_out, f as detach, g as destroy_each, t as text, u as create_component, v as mount_component, h as set_data, w as destroy_component, r as group_outros, k as Stanza, l as defineStanzaElement } from './index-e41a6caa.js';
import { F as Fa, f as faCircleChevronRight } from './index-97bbddfa.js';

/* stanzas/hgvs-keyvalue/App.svelte generated by Svelte v3.58.0 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i].genome;
	child_ctx[2] = list[i].index;
	child_ctx[3] = list[i].transcript;
	return child_ctx;
}

// (48:6) {#each hgvsKeys as { genome, index, transcript }}
function create_each_block(ctx) {
	let tr;
	let th;
	let t0_value = /*index*/ ctx[2] + "";
	let t0;
	let t1;
	let td0;
	let span;
	let t2_value = /*genome*/ ctx[1] + "";
	let t2;
	let t3;
	let fa;
	let t4;
	let td1;
	let t5_value = /*transcript*/ ctx[3] + "";
	let t5;
	let t6;
	let current;

	fa = new Fa({
			props: {
				icon: faCircleChevronRight,
				size: "90%",
				color: "var(--variant-color)"
			}
		});

	return {
		c() {
			tr = element("tr");
			th = element("th");
			t0 = text(t0_value);
			t1 = space();
			td0 = element("td");
			span = element("span");
			t2 = text(t2_value);
			t3 = space();
			create_component(fa.$$.fragment);
			t4 = space();
			td1 = element("td");
			t5 = text(t5_value);
			t6 = space();
		},
		m(target, anchor) {
			insert(target, tr, anchor);
			append(tr, th);
			append(th, t0);
			append(tr, t1);
			append(tr, td0);
			append(td0, span);
			append(span, t2);
			append(span, t3);
			mount_component(fa, span, null);
			append(tr, t4);
			append(tr, td1);
			append(td1, t5);
			append(tr, t6);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*hgvsKeys*/ 1) && t0_value !== (t0_value = /*index*/ ctx[2] + "")) set_data(t0, t0_value);
			if ((!current || dirty & /*hgvsKeys*/ 1) && t2_value !== (t2_value = /*genome*/ ctx[1] + "")) set_data(t2, t2_value);
			if ((!current || dirty & /*hgvsKeys*/ 1) && t5_value !== (t5_value = /*transcript*/ ctx[3] + "")) set_data(t5, t5_value);
		},
		i(local) {
			if (current) return;
			transition_in(fa.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(fa.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(tr);
			destroy_component(fa);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let h3;
	let t1;
	let table;
	let thead;
	let t5;
	let tbody;
	let current;
	let each_value = /*hgvsKeys*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div = element("div");
			h3 = element("h3");
			h3.textContent = "HGVS Information";
			t1 = space();
			table = element("table");
			thead = element("thead");

			thead.innerHTML = `<tr><th colspan="2">Gene</th> 
        <th>Transcript</th></tr>`;

			t5 = space();
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(h3, "class", "title");
			attr(div, "class", "hgvs-keyvalue");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h3);
			append(div, t1);
			append(div, table);
			append(table, thead);
			append(table, t5);
			append(table, tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(tbody, null);
				}
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*hgvsKeys, faCircleChevronRight*/ 1) {
				each_value = /*hgvsKeys*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(tbody, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let hgvsKeys;

	setTimeout(
		() => {
			$$invalidate(0, hgvsKeys = [
				{
					genome: "ALK",
					index: "clinvar",
					transcript: ["NC_000002.12:g.29222591C>T"]
				},
				{
					genome: "ALK",
					index: "ensembl",
					transcript: ["ENST00000389048:c.3376G>A"]
				},
				{
					genome: "",
					index: "genbank",
					transcript: [""]
				}
			]);
		},
		1000
	);

	$$invalidate(0, hgvsKeys = []);
	return [hgvsKeys];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

class HgvsKeyvalue extends Stanza {
  app = null;

  async render() {
    if (this.app) {
      this.root.querySelector("main > .heatmap-table").remove();
    }
    this.app = new App({
      target: this.root.querySelector("main"),
      props: {
        root: this.root.querySelector("main"),
      },
    });
  }
}

var stanzaModule = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': HgvsKeyvalue
});

var metadata = {
	"@context": {
	stanza: "http://togostanza.org/resource/stanza#"
},
	"@id": "hgvs-keyvalue",
	"stanza:label": "HGVS Key-Value",
	"stanza:definition": "For PrecisionMD-DB",
	"stanza:license": "MIT",
	"stanza:author": "PENQE",
	"stanza:contributor": [
	"Yukiko Noda"
],
	"stanza:created": "2023-04-05",
	"stanza:updated": "2023-04-05",
	"stanza:parameter": [
],
	"stanza:menu-placement": "none",
	"stanza:style": [
	{
		"stanza:key": "--togostanza-canvas-height",
		"stanza:type": "number",
		"stanza:default": 350,
		"stanza:description": "Canvas height"
	},
	{
		"stanza:key": "--togostanza-theme-background_color",
		"stanza:type": "color",
		"stanza:default": "#11435c",
		"stanza:description": "Background color"
	},
	{
		"stanza:key": "--togostanza-fonts-font_family",
		"stanza:type": "text",
		"stanza:default": "Helvetica Neue, Arial, sans-serif",
		"stanza:description": "Font family"
	},
	{
		"stanza:key": "--togostanza-fonts-font_color",
		"stanza:type": "color",
		"stanza:default": "#ffffff",
		"stanza:description": "Text color"
	},
	{
		"stanza:key": "--togostanza-fonts-font_size_primary",
		"stanza:type": "number",
		"stanza:default": 14,
		"stanza:description": "Primary font size"
	},
	{
		"stanza:key": "--togostanza-fonts-font_align",
		"stanza:type": "single-choice",
		"stanza:choice": [
			"left",
			"center",
			"right"
		],
		"stanza:default": "center",
		"stanza:description": "text align of greeting"
	}
],
	"stanza:incomingEvent": [
],
	"stanza:outgoingEvent": [
]
};

var templates = [
  
];

const url = import.meta.url.replace(/\?.*$/, '');

defineStanzaElement({stanzaModule, metadata, templates, url});
//# sourceMappingURL=hgvs-keyvalue.js.map
